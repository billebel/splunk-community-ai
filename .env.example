# Catalyst MCP Server Configuration Template
# Copy this file to .env and update with your actual values
# NEVER commit the .env file with real credentials to version control!

# =============================================================================
# MCP SERVER CONFIGURATION
# =============================================================================

# Port for the MCP server to listen on
MCP_PORT=8443

# Host for the MCP server (use 0.0.0.0 for Docker, localhost for local dev)
MCP_HOST=0.0.0.0

# Log level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# =============================================================================
# KNOWLEDGE PACK CONFIGURATION
# =============================================================================

# Knowledge packs are loaded from the knowledge-packs/ directory
# See individual pack README files for specific configuration requirements
# Example: knowledge-packs/splunk_enterprise/README.md

# Splunk Community Pack Configuration
SPLUNK_URL=https://your-splunk-instance:8089

# Authentication Method Selection (set during deployment)
# Options: basic, token, passthrough
# SPLUNK_AUTH_METHOD=basic

# Basic Authentication (username/password)
SPLUNK_USER=your-splunk-username
SPLUNK_PASSWORD=your-splunk-password

# Token Authentication (recommended for production)
# SPLUNK_TOKEN=your-splunk-authentication-token

# Passthrough Authentication (enterprise - no additional variables needed)

SPLUNK_HEC_TOKEN=your-hec-token-here

# For local development with Docker:
# docker run -d -p 8000:8000 -p 8089:8089 -p 8088:8088 \
#   -e SPLUNK_START_ARGS='--accept-license' \
#   -e SPLUNK_PASSWORD='your-password' \
#   -e SPLUNK_HEC_TOKEN='your-hec-token' \
#   -e SPLUNK_HEC_SSL=false \
#   --name splunk-dev splunk/splunk:latest
#
# Access: http://localhost:8000 (username/password from container setup)
# API: http://localhost:8089
# HEC: http://localhost:8088/services/collector/event

# =============================================================================
# AI MODEL PROVIDER API KEYS (ONLY REQUIRED FOR WEB CHAT INTERFACE)
# =============================================================================
# Skip this section if using MCP-only deployment (docker-compose.mcp-only.yml)
# Your MCP client (Claude Desktop, etc.) will handle AI integration

# Anthropic API key (for Claude models)
ANTHROPIC_API_KEY=your-anthropic-api-key

# Available Anthropic models (latest as of 2025)
ANTHROPIC_MODELS=claude-opus-4-1-20250805,claude-opus-4-20250514,claude-sonnet-4-20250514,claude-3-5-haiku-20241022,claude-3-haiku-20240307

# OpenAI API key (optional)
OPENAI_API_KEY=your-openai-api-key

# OpenAI models to enable (optional)
OPENAI_MODELS=gpt-4,gpt-3.5-turbo

# Google API key for Gemini models (optional)  
GOOGLE_API_KEY=your-google-api-key

# Google models to enable (optional)
GOOGLE_MODELS=gemini-2.5-flash,gemini-2.5-pro,gemini-2.5-flash-lite

# =============================================================================
# LIBRECHAT CHAT INTERFACE (ONLY REQUIRED FOR WEB CHAT INTERFACE)
# =============================================================================
# Skip this section if using MCP-only deployment (docker-compose.mcp-only.yml)

# JWT secrets for session management (change these for production!)
JWT_SECRET=your-jwt-secret-change-in-production
JWT_REFRESH_SECRET=your-refresh-secret-change-in-production

# Allow new user registration (true for development, false for production)
ALLOW_REGISTRATION=false

# OAuth providers (optional)
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# Container network name
DOCKER_NETWORK=catalyst-network

# Container names
MCP_CONTAINER_NAME=catalyst-mcp
LIBRECHAT_CONTAINER_NAME=librechat